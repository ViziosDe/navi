% PowerView (Active Directory & Domain Enumeration)

# Load the PowerView module (update <path> to the location of PowerView.ps1)
. .\<path>

# Get a list of Active Directory users
Get-NetUser

# Get a list of Group Policy Objects (GPO) in the current domain
Get-DomainGPO

# List group-managed service account (gMSA) objects
Get-DomainObject -LDAPFilter '(objectClass=msDS-GroupManagedServiceAccount)'

# Get GPOs applied to a specific computer
Get-DomainGPO -ComputerIdentity <computername>

# Get GPOs that set Restricted Groups or groups.xml (useful to identify interesting users)
Get-DomainGPOLocalGroup

# Get the mapping of local groups to users defined via GPO on a specific computer
Get-DomainGPOComputerLocalGroupMapping -ComputerIdentity <computername>

# Get machines where the given user is a member of a specific local group (GPO mapping)
Get-DomainGPOUserLocalGroupMapping -Identity <username> -Verbose

# Get organizational units (OUs) in the current domain
Get-DomainOU

# Get GPOs applied to a specific OU (provide the OU's SID)
Get-DomainGPO -Identity <OU-SID>

# List groups that a user is a member of
Get-DomainGroup -UserName <username>

# Get users that are members of a local group on all computers in the domain
(Get-DomainOU).distinguishedname | ForEach-Object { Get-DomainComputer -SearchBase $_ } | Get-DomainGPOComputerLocalGroupMapping

# Get users in a local group for computers in a specific OU
(Get-DomainOU -Identity '<ldap-path>').distinguishedname | ForEach-Object { Get-DomainComputer -SearchBase $_ } | Get-DomainGPOComputerLocalGroupMapping

# Get computers in a specific OU
(Get-DomainOU -Identity <OU-Name>).distinguishedname | ForEach-Object { Get-DomainComputer -SearchBase $_ }

# Get the access control list (ACL) associated with a specific object and resolve GUIDs
Get-DomainObjectACL -Identity "<object-name>" -ResolveGUIDs

# Get ACL associated with a specific LDAP path
Get-DomainObjectACL -SearchBase LDAP://<ldap-path> -ResolveGUIDs -Verbose

# Find interesting ACLs across the domain (e.g. write privileges)
Find-InterestingDomainAcl -ResolveGUIDs

# Find interesting ACLs for a specific object (user/group)
Find-InterestingDomainAcl -ResolveGUIDs | Where-Object { $_.IdentityReferenceName -match '<object-name>' }

# Get the ACL on a filesystem path
Get-PathAcl -Path "<path>"

# List domain trusts for the current domain
Get-DomainTrust

# List domain trusts for a specific domain
Get-DomainTrust -Domain <domain-name>

# Get details about the current forest
Get-Forest

# Enumerate all domains in the current forest
Get-ForestDomain

# List all global catalog servers in the current forest
Get-ForestGlobalCatalog

# Map trusts within the forest
Get-ForestTrust

# Identify external trusts within the forest
Get-ForestDomain -Verbose | Get-DomainTrust | Where-Object { $_.TrustAttributes -eq 'FILTER_SIDS' }

# Check if you have local admin access on a specific computer
Test-AdminAccess -ComputerName <computername>

# Find computers where the current user has local admin access
Find-LocalAdminAccess -Verbose

# Find computers where a specified user or group currently has a session
Find-DomainUserLocation -UserGroupIdentity '<user-or-group-name>'

# Find computers where a user or group session is available and you have admin access
Find-DomainUserLocation -UserGroupIdentity '<user-or-group-name>' -CheckAccess

# Find file servers and DFS servers where a user or group has a session (stealth mode)
Find-DomainUserLocation -UserGroupIdentity '<user-or-group-name>' -Stealth

# List kerberoastable users (accounts with SPNs set)
Get-DomainUser -SPN

# Set a Service Principal Name (SPN) on a user account (requires appropriate privileges)
Set-DomainObject -Identity "<username>" -Set @{serviceprincipalname='<domain>/<serviceprincipalname>'}

# Find OUs that can read LAPS passwords on computers
Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | Where-Object { ($_.ObjectAceType -like 'ms-Mcs-AdmPwd') -and ($_.ActiveDirectoryRights -match 'ReadProperty') } | ForEach-Object { $_ | Add-Member NoteProperty 'IdentityName' $(Convert-SidToName $_.SecurityIdentifier); $_ }

# Read the LAPS password of a computer
Get-DomainObject -Identity <computername> | Select-Object -ExpandProperty ms-mcs-admpwd

# Find computers with unconstrained delegation enabled
Get-DomainComputer -Unconstrained

# Get all gMSA accounts in the domain
Get-DomainGMSA

# Find accounts trusted to authenticate for delegation (constrained delegation)
Get-DomainUser -TrustedToAuth

# Get computers trusted for delegation to specific services
Get-DomainComputer -TrustedToAuthForDelegation

# Recursively enumerate group membership of a domain group
Get-DomainGroupMember -Identity "<groupname>" -Recurse | Select-Object Name,SamAccountName,ObjectClass

# Scan the domain for dangerous ACLs with ACLScanner
Invoke-ACLScanner -ResolveGUIDs

# Find paths to potentially sensitive files using GPOs
Find-GPOLocation -LocalAdmins
